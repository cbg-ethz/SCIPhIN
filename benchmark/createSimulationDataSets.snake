# SCIPhI: Single-cell mutation identification via phylogenetic inference
#
# Copyright (C) 2018 ETH Zurich, Jochen Singer
#
# This file is part of SCIPhI.
#
# SCIPhIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SCIPhIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SCIPhI. If not, see <http://www.gnu.org/licenses/>.
# 
# @author: Jochen Singer

import os
from subprocess import call
from snakemake.utils import R

def getSeed(wildcards):
    return str(int(wildcards.run) + 2)

def getLossNumber(wildcards):
    return int(float(wildcards.loss) * NUMMUTATIONS)

def getParaNumber(wildcards):
    return int(float(wildcards.para) * NUMMUTATIONS)

rule createTree:
    output:
        tsvArt = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/art_tree_mut2sample.tsv',
        dotArt = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/art_tree_simple_structure.dot'
    params:
        lsfoutfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/art_tree_mutations.lsfout.log',
        lsferrfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/art_tree_mutations.lsferr.log',
        scratch = '1000',
        mem = '1000',
        time = '10',
        out = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/art_tree',
        numPos = str(NUMPOSITIONS),
        seed = getSeed,
        loss = getLossNumber,
        para = getParaNumber
    benchmark:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/art_tree_mutations.benchmark'
    threads:
        1
    log:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/art_tree_mutations.log'
    shell:
        (CREATESINGLECELLTREE + ' ' +
        '-nml ' +
        '-o {params.out} ' +
        '-s {params.seed} ' +
        '-dor {wildcards.drop} ' +
        '-clbm {wildcards.zyg} ' +
        '-cpn {wildcards.cpn} ' +
        '-mi 0 ' +
        '-ns {wildcards.cells} ' +
        '-nm {wildcards.muts} ' +
        '-nrm {params.para} ' +
        '-nlm {params.loss} ' +
        '-np {params.numPos}')

def getBams(wildcards):
    output = []
    for i in range(0, int(wildcards.cells)):
        output.append(OUTDIR + 'cells_' + wildcards.cells +
        '/muts_' + wildcards.muts +
        '/drop_' + wildcards.drop +
        '/zyg_' + wildcards.zyg +
        '/cpn_' + wildcards.cpn +
        '/loss_' + wildcards.loss +
        '/para_' + wildcards.para +
        '/run_' + wildcards.run +
        '/cell' + str(i) +
        '/' + str(i) + '.bam')
    return output

localrules: createBamFileSummary
rule createBamFileSummary:
    output:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/cellInfo.txt'
    params: 
        bams = getBams
    shell:
        '''
        touch {output}
        for file in {params.bams}
        do
            mkdir -p $(dirname $file)
            touch $file
            echo $file >> {output}
        done
        '''

rule createMpileup:
    input:
        tsv = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/art_tree_mut2sample.tsv',
    output:
        mpileup = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/combined.mpileup',
        ref = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/combined.fa'
    params:
        lsfoutfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/combined.lsfout.log',
        lsferrfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/combined.lsferr.log',
        scratch = '20000',
        mem = '20000',
        time = '180',
        seed = getSeed
    benchmark:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/combined.benchmark'
    shell:
        (PYTHON3 + ' ' + CREATEMPILEUP + ' ' +
        '-i {output.ref} ' +
        '-f {input.tsv} ' +
        '-o {output.mpileup} ' +
        '-n ' + str(NUMPOSITIONS) + ' ' +
        '-c ' + str(COVMEAN) + ' ' +
        '-v ' + str(COVVAR) + ' ' +
        '-l ' + str(AVERAGEREGIONLENGTH) + ' ' +
        '-N {wildcards.cells} ' + 
        '-m ' + str(MDAERRORRATE) + ' ' +
        '-e ' + str(SEQUENCINGERRORRATE) + ' ' +
        '-M 0.1 ' +
        '-a ' + str(ALPHA) + ' ' +
        '-b ' + str(BETA) + ' ' +
        '-s {params.seed}')

localrules: createBamFileSummaryScate
rule createBamFileSummaryScate:
    output:
        bam = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/sciphi/force_zyg_{fzyg}/input_spec.txt',
        bam_orig = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/sciphi_orig/force_zyg_{fzyg}/input_spec.txt',
        bam_max = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/sciphi_max/force_zyg_{fzyg}/input_spec.txt'
    params: 
        bams = getBams
    shell:
        '''
        truncate -s0 {output.bam}
        for file in {params.bams}
        do
            printf $file"\tCT\n" >> {output.bam}
        done
        cp {output.bam} {output.bam_orig}
        cp {output.bam} {output.bam_max}
        '''

def getZyg(wildcards):
    if wildcards.fzyg == '0':
        return '0'
    else:
        return '1'

def get_ll_lp(wildcards):
    if wildcards.sciphi == 'sciphi':
        return '1'
    if wildcards.sciphi == 'sciphi_max':
        return '1'
    else:
        return '0'

def get_mlm(wildcards):
    if wildcards.sciphi == 'sciphi_max':
        return '1'
    else:
        return '0'

rule sciphi_n:
    input:
        fileNames = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{sciphi}/force_zyg_{fzyg}/input_spec.txt',
        mpileups = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/combined.mpileup'
    output:
        tsv = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{sciphi}/force_zyg_{fzyg}/{sciphi}_mut2Sample.tsv',
        gv = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{sciphi}/force_zyg_{fzyg}/{sciphi}.gv',
        probs = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{sciphi}/force_zyg_{fzyg}/{sciphi}.probs',
        params = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{sciphi}/force_zyg_{fzyg}/{sciphi}.params.txt',
        vcf = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{sciphi}/force_zyg_{fzyg}/{sciphi}.vcf'
    params:
        lsfoutfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{sciphi}/force_zyg_{fzyg}/{sciphi}_mutations.lsfout.log',
        lsferrfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{sciphi}/force_zyg_{fzyg}/{sciphi}_mutations.lsferr.log',
        scratch = '1000',
        mem = '1000',
        time = '180',
        out = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{sciphi}/force_zyg_{fzyg}/{sciphi}',
        loops = str(LOOPS),
        zyg = getZyg,
        seed = getSeed,
        ll = get_ll_lp,
        lp = get_ll_lp,
        mlm = get_mlm
    benchmark:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{sciphi}/force_zyg_{fzyg}/{sciphi}_mutations.benchmark'
    threads:
        1
    log:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{sciphi}/force_zyg_{fzyg}/{sciphi}_mutations.log'
    shell:
        (SCIPHI + 
        ' --ll {params.ll} ' +
        '--lp {params.lp} ' +
        '--mlm {params.mlm} ' +
        '--ol {params.out}/{wildcards.sciphi}/last ' +
        '--cwm 2 ' + 
        '--lz {params.zyg} ' +
        '-l {params.loops} '
        '--pr {wildcards.prior} ' +
        '--seed {params.seed} ' +
        '-o {params.out} ' +
        '--in {input.fileNames} ' +
        '--im {input.mpileups}')

localrules: sciphiToHeatMap
rule sciphiToHeatMap:
    input:
        probs = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/sciphi/force_zyg_{fzyg}/sciphi.probs',
        gv = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/sciphi/force_zyg_{fzyg}/sciphi.gv',
    output:
        tsv = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/sciphi/force_zyg_{fzyg}/sciphi_heatTree.tsv',
        pdf = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/sciphi/force_zyg_{fzyg}/sciphi_heatTree.pdf'
    shell:
        CONVERTTREE2MAP + ' -i {input.gv} -p {input.probs} -o {output.tsv}; ' + PLOTSCIPHIHEATTREE + ' {output.tsv} {output.pdf}'


rule monovar:
    input:
        ref = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/combined.fa',
        mpileup = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/combined.mpileup',
        fileNames = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/cellInfo.txt'
    output:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/monovar/monovar.vcf'
    params:
        lsfoutfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/monovar/monovar.vcf.lsfout.log',
        lsferrfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/monovar/monovar.vcf.lsferr.log',
        scratch = '1000',
        mem = '1000',
        time = '360',
    benchmark:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/monovar/monovar.vcf.benchmark'
    shell:
        ('source ' + MONOVARACTIVATE + '; ' + 
        'cat {input.mpileup} | ' +
        MOMOVAR + 
        ' -p {wildcards.prior} ' +
        '-a {wildcards.drop} ' +
        '-t 0.05 ' +
        '-m 2 ' +
        '-f {input.ref} ' +
        '-b {input.fileNames} ' +
        '-o {output}')

rule varscan:
    input:
        mpileup = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/combined.mpileup',
        fileNames = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/cellInfo.txt'
    output:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/varscan/varscan.vcf'
    params:
        lsfoutfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/varscan/varscan.vcf.lsfout.log',
        lsferrfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/varscan/varscan.vcf.lsferr.log',
        scratch = '1000',
        mem = '1000',
        time = '360',
    conda:
        'envs/varscan2.yaml'
    benchmark:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/varscan/varscan.vcf.benchmark'
    shell:
        ('varscan mpileup2snp {input.mpileup} --output-vcf 1 --strand-filter 0 > {output}')

localrules: binarizeVCF
rule binarizeVCF:
    input:
        vcf = '{sample}/monovar.vcf'
    output:
        bin = '{sample}/monovar.bin'
    shell:
        PYTHON3 + ' ' + BINARIZEVCF + ' {input.vcf} {output.bin}'

localrules: binarizeSciphiVCF
ruleorder: binarizeVCF > binarizeSciphiVCF 
rule binarizeSciphiVCF:
    input:
        vcf = '{sample}.vcf'
    output:
        bin = '{sample}.bin',
        bin2 = '{sample}_noNAs.bin'
    shell:
        PYTHON3 + ' ' + BINARIZESCIPHIVCF + ' {input.vcf} {output.bin}'

rule compare2GroundTruth:
    input:
        tool = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}.bin',
        tsvArt = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/art_tree_mut2sample.tsv',
        mpileup = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/combined.mpileup'
    output: 
        txt = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_distance.txt',
        fp =  OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_false_positives.txt',
        fn = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_false_negatives.txt'
    params:
        lsfoutfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_distance.txt.lsfout.log',
        lsferrfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_distance.txt.lsferr.log',
        scratch = '10000',
        mem = '10000',
        time = '60'
    benchmark:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_distance.txt.benchmark'
    shell:
        PYTHON3 + ' ' + COMPARE2GROUNDTRUTH + ' {input.tsvArt} {input.mpileup} {input.tool} {output.txt} {output.fp} {output.fn}'

localrules: computeTreeDistance
rule computeTreeDistance:
    input:
        sciphi = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}.probs',
        gvArt = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/art_tree_mut2sample.tsv',
    output: 
        txt = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_tree_distance.txt'
    shell:
        PYTHON3 + ' ' + COMPUTETREEDISTANCE + ' {input.gvArt} {input.sciphi} 0 > {output.txt}'

rule createPNCounts:
    input:
        mpileup = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/combined.mpileup',
        txt = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_false_{type}.txt'
    output:
        txt = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_false_{type}_nucleotides.txt'
    params:
        lsfoutfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_false_{type}_nucleotides.txt.lsfout.log',
        lsferrfile = OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_false_{type}_nucleotides.txt.lsferr.log',
        scratch = '10000',
        mem = '10000',
        time = '60'
    benchmark:
        OUTDIR + 'cells_{cells}/muts_{muts}/drop_{drop}/zyg_{zyg}/cpn_{cpn}/loss_{loss}/para_{para}/run_{run}/prior_{prior}/{tool}/{sample}_false_{type}_nucleotides.txt.benchmark'
    shell:
        PYTHON3 + ' ' + CREATEFPCOUNTS + ' {input.txt} {input.mpileup} {output.txt}'

localrules: gatherBenchmarksNumCells
rule gatherBenchmarksNumCells:
    input:
        expand(OUTDIR + 'cells_{numCells}/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_0/run_{run}/prior_0.0001/sciphi/force_zyg_1/sciphi_{{distance}}.txt', numCells = NUMCELLS, run = range(0, NUMRUNS)),
        expand(OUTDIR + 'cells_{numCells}/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_0/run_{run}/prior_0.002/monovar/monovar_distance.txt', numCells = NUMCELLS, run = range(0, NUMRUNS)),
    output:
        txt = OUTDIR + '{distance}_numCells.txt',
        rec = OUTDIR + '{distance}_numCells_pre.pdf',
        pre = OUTDIR + '{distance}_numCells_rec.pdf',
        f1 = OUTDIR +  '{distance}_numCells_f1.pdf'
    shell:
        (PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {input}; ' +
        RSCRIPT  + PLOTNUMCELLS + ' {output.txt}')

localrules: gatherBenchmarksPrior
rule gatherBenchmarksPrior:
    input:
        expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_0/run_{run}/prior_{prior}/sciphi/force_zyg_1/sciphi_{{distance}}.txt', prior = PRIORSSCIPHI, run = range(0, NUMRUNS)),
        expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_0/run_{run}/prior_{prior}/monovar/monovar_distance.txt', prior = PRIORSMONOVAR, run = range(0, NUMRUNS)),
    output:
        txt = OUTDIR + '{distance}_prior.txt',
        rec = OUTDIR + '{distance}_prior_rec.pdf',
        pre = OUTDIR + '{distance}_prior_pre.pdf',
        f1 = OUTDIR +  '{distance}_prior_f1.pdf'
    shell:
        (PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {input}; ' +
        RSCRIPT  + PLOTPRIORS + ' {output.txt}')

localrules: gatherBenchmarksDropOuts
rule gatherBenchmarksDropOuts:
    input:
        expand(OUTDIR + 'cells_25/muts_100/drop_{drop}/zyg_0/cpn_0/loss_0/para_0/run_{run}/prior_0.0001/sciphi/force_zyg_1/sciphi_{{distance}}.txt', drop = DROPOUTS, run = range(0, NUMRUNS)),
        expand(OUTDIR + 'cells_25/muts_100/drop_{drop}/zyg_0/cpn_0/loss_0/para_0/run_{run}/prior_0.002/monovar/monovar_distance.txt', drop = DROPOUTS, run = range(0, NUMRUNS)),
    output: 
        txt = OUTDIR + '{distance}_drop.txt',
        rec = OUTDIR + '{distance}_drop_rec.pdf',
        pre = OUTDIR + '{distance}_drop_pre.pdf',
        f1 = OUTDIR +  '{distance}_drop_f1.pdf'
    shell:
        (PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {input}; ' +
        RSCRIPT  + PLOTDROPOUTS + ' {output.txt}')

localrules: gatherBenchmarksDropOutsWithVarScan 
rule gatherBenchmarksDropOutsWithVarScan:
    input:
        expand(OUTDIR + 'cells_25/muts_100/drop_{drop}/zyg_0/cpn_0/loss_0/para_0/run_{run}/prior_0.0001/sciphi/force_zyg_1/sciphi_{{distance}}.txt', drop = DROPOUTS, run = range(0, NUMRUNS)),
        expand(OUTDIR + 'cells_25/muts_100/drop_{drop}/zyg_0/cpn_0/loss_0/para_0/run_{run}/prior_0.002/monovar/monovar_distance.txt', drop = DROPOUTS, run = range(0, NUMRUNS)),
        expand(OUTDIR + 'cells_25/muts_100/drop_{drop}/zyg_0/cpn_0/loss_0/para_0/run_{run}/prior_0/varscan/varscan_distance.txt', drop = DROPOUTS, run = range(0, NUMRUNS)),
    output: 
        txt = OUTDIR + '{distance}_drop_wVS.txt',
        rec = OUTDIR + '{distance}_drop_wVS_rec.pdf',
        pre = OUTDIR + '{distance}_drop_wVS_pre.pdf',
        f1 = OUTDIR +  '{distance}_drop_wVS_f1.pdf'
    shell:
        (PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {input}; ' +
        RSCRIPT  + PLOTDROPOUTSWITHVARSCAN + ' {output.txt}')

localrules: gatherBenchmarksZygs
rule gatherBenchmarksZygs:
    input:
        expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_{zyg}/cpn_0/loss_0/para_0/run_{run}/prior_0.0001/sciphi/force_zyg_1/sciphi_{{distance}}.txt', zyg = ZYGS, run = range(0, NUMRUNS)),
        expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_{zyg}/cpn_0/loss_0/para_0/run_{run}/prior_0.002/monovar/monovar_distance.txt', zyg = ZYGS, run = range(0, NUMRUNS)),
    output:
        txt = OUTDIR + '{distance}_zyg.txt',
        rec = OUTDIR + '{distance}_zyg_rec.pdf',
        pre = OUTDIR + '{distance}_zyg_pre.pdf',
        f1 = OUTDIR +  '{distance}_zyg_f1.pdf'
    shell:
        (PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {input}; ' +
        RSCRIPT  + PLOTCLBMS + ' {output.txt}')

localrules: gatherBenchmarksCpns
rule gatherBenchmarksCpns:
    input:
        expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_{cpn}/loss_0/para_0/run_{run}/prior_0.0001/sciphi/force_zyg_1/sciphi_{{distance}}.txt', cpn = CPNS, run = range(0, NUMRUNS)),
        expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_{cpn}/loss_0/para_0/run_{run}/prior_0.002/monovar/monovar_distance.txt', cpn = CPNS, run = range(0, NUMRUNS)),
    output:
        txt = OUTDIR + '{distance}_cpn.txt',
        rec = OUTDIR + '{distance}_cpn_rec.pdf',
        pre = OUTDIR + '{distance}_cpn_pre.pdf',
        f1 = OUTDIR +  '{distance}_cpn_f1.pdf'
    shell:
        (PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {input}; ' +
        RSCRIPT  + PLOTCPNS + ' {output.txt}')

localrules: gatherBenchmarksLoss
rule gatherBenchmarksLoss:
    input:
        in1 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0/run_{run}/prior_0.0001/{sciphi}/force_zyg_1/{sciphi}_{{distance}}.txt', loss = LOSS, run = range(0, NUMRUNS), sciphi = ['sciphi']),
        in2 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0/run_{run}/prior_0.0001/{sciphi}/force_zyg_1/{sciphi}_{{distance}}.txt', loss = LOSS, run = range(0, NUMRUNS), sciphi = ['sciphi_orig']),
        in3 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0/run_{run}/prior_0.0001/{sciphi}/force_zyg_1/{sciphi}_{{distance}}.txt', loss = LOSS, run = range(0, NUMRUNS), sciphi = ['sciphi_max']),
        in4 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0/run_{run}/prior_0.002/monovar/monovar_distance.txt', loss = LOSS, run = range(0, NUMRUNS)),
    output:
        txt = OUTDIR + '{distance}_loss.txt',
        rec = OUTDIR + '{distance}_loss_rec.pdf',
        pre = OUTDIR + '{distance}_loss_pre.pdf',
        f1 = OUTDIR + '{distance}_loss_f1.pdf',
        inFile = OUTDIR + '{distance}_loss_in.txt'
    shell:
        ('> {output.inFile}; ' + 
        'for l in ' + " ".join(LOSS) + '; do for r in ' + " ".join([str(r) for r in range(0, NUMRUNS)]) + '; do ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{l}}/para_0/run_${{r}}/prior_0.0001/sciphi/force_zyg_1/sciphi_{wildcards.distance}.txt"\\n" >> {output.inFile}; ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{l}}/para_0/run_${{r}}/prior_0.0001/sciphi_orig/force_zyg_1/sciphi_orig_{wildcards.distance}.txt"\\n" >> {output.inFile}; ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{l}}/para_0/run_${{r}}/prior_0.0001/sciphi_max/force_zyg_1/sciphi_max_{wildcards.distance}.txt"\\n" >> {output.inFile}; ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{l}}/para_0/run_${{r}}/prior_0.002/monovar/monovar_distance.txt"\\n" >> {output.inFile}; ' +
        'done; done; ' +
        PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {output.inFile}; ' +
        RSCRIPT  + PLOTLOSS + ' {output.txt}')
        #'for f in {input.in1}; do echo $f >> {output.inFile}; done; ' +
        #'for f in {input.in2}; do echo $f >> {output.inFile}; done; ' +
        #'for f in {input.in3}; do echo $f >> {output.inFile}; done; ' +
        #PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {output.inFile}; ' +
        #RSCRIPT  + PLOTLOSS + ' {output.txt}')

localrules: gatherBenchmarksPara
rule gatherBenchmarksPara:
    input:
        in1 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_{para}/run_{run}/prior_0.0001/{sciphi}/force_zyg_1/{sciphi}_{{distance}}.txt', para = PARA, run = range(0, NUMRUNS), sciphi = ['sciphi']),
        in2 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_{para}/run_{run}/prior_0.0001/{sciphi}/force_zyg_1/{sciphi}_{{distance}}.txt', para = PARA, run = range(0, NUMRUNS), sciphi = ['sciphi_orig']),
        in3 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_{para}/run_{run}/prior_0.0001/{sciphi}/force_zyg_1/{sciphi}_{{distance}}.txt', para = PARA, run = range(0, NUMRUNS), sciphi = ['sciphi_max']),
        in4 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_{para}/run_{run}/prior_0.002/monovar/monovar_distance.txt', para = PARA, run = range(0, NUMRUNS)),
    output:
        txt = OUTDIR + '{distance}_para.txt',
        rec = OUTDIR + '{distance}_para_rec.pdf',
        pre = OUTDIR + '{distance}_para_pre.pdf',
        f1 = OUTDIR +  '{distance}_para_f1.pdf',
        inFile = OUTDIR +  '{distance}_para_in.txt'
    shell:
        ('> {output.inFile}; ' + 
        'for p in ' + " ".join(PARA) + '; do for r in ' + " ".join([str(r) for r in range(0, NUMRUNS)]) + '; do ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_${{p}}/run_${{r}}/prior_0.0001/sciphi/force_zyg_1/sciphi_{wildcards.distance}.txt"\\n" >> {output.inFile}; ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_${{p}}/run_${{r}}/prior_0.0001/sciphi_orig/force_zyg_1/sciphi_orig_{wildcards.distance}.txt"\\n" >> {output.inFile}; ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_${{p}}/run_${{r}}/prior_0.0001/sciphi_max/force_zyg_1/sciphi_max_{wildcards.distance}.txt"\\n" >> {output.inFile}; ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_${{p}}/run_${{r}}/prior_0.002/monovar/monovar_distance.txt"\\n" >> {output.inFile}; ' +
        'done; done; ' +  
        PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {output.inFile}; ' +
        RSCRIPT  + PLOTPARA + ' {output.txt}')
        #'for f in {input.in1}; do echo $f >> {output.inFile}; done; ' +
        #'for f in {input.in2}; do echo $f >> {output.inFile}; done; ' +
        #'for f in {input.in3}; do echo $f >> {output.inFile}; done; ' +
        #PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {output.inFile}; ' +
        #RSCRIPT  + PLOTPARA + ' {output.txt}')

localrules: gatherBenchmarksLossPara
rule gatherBenchmarksLossPara:
    input:
        in1 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0.05/run_{run}/prior_0.0001/{sciphi}/force_zyg_1/{sciphi}_{{distance}}.txt', loss = LOSS, run = range(0, NUMRUNS), sciphi=['sciphi']),
        in2 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0.05/run_{run}/prior_0.0001/{sciphi}/force_zyg_1/{sciphi}_{{distance}}.txt', loss = LOSS, run = range(0, NUMRUNS), sciphi=['sciphi_orig']),
        in3 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0.05/run_{run}/prior_0.0001/{sciphi}/force_zyg_1/{sciphi}_{{distance}}.txt', loss = LOSS, run = range(0, NUMRUNS), sciphi=['sciphi_max']),
        in4 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0.05/run_{run}/prior_0.002/monovar/monovar_distance.txt', loss = LOSS, run = range(0, NUMRUNS)),
    output:
        txt = OUTDIR + '{distance}_lossPara.txt',
        rec = OUTDIR + '{distance}_lossPara_rec.pdf',
        pre = OUTDIR + '{distance}_lossPara_pre.pdf',
        f1 = OUTDIR +  '{distance}_lossPara_f1.pdf',
        inFile = OUTDIR +  '{distance}_lossPara_in.txt'
    shell:
        ('> {output.inFile}; ' +
        'for l in ' + " ".join(LOSS) + '; do for r in ' + " ".join([str(r) for r in range(0, NUMRUNS)]) + '; do ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{l}}/para_0.05/run_${{r}}/prior_0.0001/sciphi/force_zyg_1/sciphi_{wildcards.distance}.txt"\\n" >> {output.inFile}; ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{l}}/para_0.05/run_${{r}}/prior_0.0001/sciphi_orig/force_zyg_1/sciphi_orig_{wildcards.distance}.txt"\\n" >> {output.inFile}; ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{l}}/para_0.05/run_${{r}}/prior_0.0001/sciphi_max/force_zyg_1/sciphi_max_{wildcards.distance}.txt"\\n" >> {output.inFile}; ' +
        'printf ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{l}}/para_0.05/run_${{r}}/prior_0.002/monovar/monovar_distance.txt"\\n" >> {output.inFile}; ' +
        'done; done; ' +  
        PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {output.inFile}; ' +
        RSCRIPT  + PLOTLOSSPARA + ' {output.txt}')
        #'for f in {input.in1}; do echo $f >> {output.inFile}; done; ' +
        #'for f in {input.in2}; do echo $f >> {output.inFile}; done; ' +
        #'for f in {input.in3}; do echo $f >> {output.inFile}; done; ' +
        #'for f in {input.in4}; do echo $f >> {output.inFile}; done; ' +
        #PYTHON3 + ' ' + GATHERBENCH + ' {output.txt} {output.inFile}; ' +
        #RSCRIPT  + PLOTLOSSPARA + ' {output.txt}')

localrules: gatherRandomTreeBenchmark
rule gatherRandomTreeBenchmark:
    input:
        d1 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0.05/run_{run}/art_tree_mut2sample.tsv', run = range(0, NUMRUNS), loss = LOSS),
        d2 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0/run_{run}/art_tree_mut2sample.tsv', run = range(0, NUMRUNS), loss = LOSS),
        d3 = expand(OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_{para}/run_{run}/art_tree_mut2sample.tsv', run = range(0, NUMRUNS), para = PARA)
    output:
        txt = OUTDIR + 'distance_random_tree.txt'
    params:
        numCells = 25,
        numRuns = NUMRUNS
    shell:
        'for loss in ' + ' '.join(LOSS) + '; do for num in {params.numCells}; do for ((i=0; i<{params.numRuns}; ++i)); do for ((j=i+1; j<{params.numRuns};++j)); do file1=\"' + OUTDIR + 'cells_${{num}}/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{loss}}/para_0.05/run_${{i}}/art_tree_mut2sample.tsv\"; file2=\"' + OUTDIR + 'cells_${{num}}/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{loss}}/para_0.05/run_${{j}}/art_tree_mut2sample.tsv\"; printf \"Random\\t${{i}}_${{j}}\\t${{num}}\\t${{loss}}\\t0.05\\t\" >> {output.txt}; ' + PYTHON3 + ' ' + COMPUTETREEDISTANCE + ' ${{file1}} ${{file2}} 1 >> {output.txt}; done; done; done; done; ' +
        'for loss in ' + ' '.join(LOSS) + '; do for num in {params.numCells}; do for ((i=0; i<{params.numRuns}; ++i)); do for ((j=i+1; j<{params.numRuns};++j)); do file1=\"' + OUTDIR + 'cells_${{num}}/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{loss}}/para_0/run_${{i}}/art_tree_mut2sample.tsv\"; file2=\"' + OUTDIR + 'cells_${{num}}/muts_100/drop_0.2/zyg_0/cpn_0/loss_${{loss}}/para_0/run_${{j}}/art_tree_mut2sample.tsv\"; printf \"Random\\t${{i}}_${{j}}\\t${{num}}\\t${{loss}}\\t0\\t\" >> {output.txt}; ' + PYTHON3 + ' ' + COMPUTETREEDISTANCE + ' ${{file1}} ${{file2}} 1 >> {output.txt}; done; done; done; done; ' +
        'for para in ' + ' '.join(PARA) + '; do for num in {params.numCells}; do for ((i=0; i<{params.numRuns}; ++i)); do for ((j=i+1; j<{params.numRuns};++j)); do file1=\"' + OUTDIR + 'cells_${{num}}/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_${{para}}/run_${{i}}/art_tree_mut2sample.tsv\"; file2=\"' + OUTDIR + 'cells_${{num}}/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_${{para}}/run_${{j}}/art_tree_mut2sample.tsv\"; printf \"Random\\t${{i}}_${{j}}\\t${{num}}\\t0\\t${{para}}\\t\" >> {output.txt}; ' + PYTHON3 + ' ' + COMPUTETREEDISTANCE + ' ${{file1}} ${{file2}} 1 >> {output.txt}; done; done; done; done'
        #'for num in {params.numCells}; do for ((i=0; i<{params.numRuns}; ++i)); do for ((j=i+1; j<{params.numRuns};++j)); do file1=\"' + OUTDIR + 'cells_${{num}}/muts_100/drop_0.2/zyg_0/cpn_0/loss_0.30/para_0.05/run_${{i}}/art_tree_mut2sample.tsv\"; file2=\"' + OUTDIR + 'cells_${{num}}/muts_100/drop_0.2/zyg_0/cpn_0/loss_0.30/para_0.05/run_${{j}}/art_tree_mut2sample.tsv\"; printf \"Random\\t${{i}}_${{j}}\\t${{num}}\\t\" >> {output.txt}; ' + PYTHON3 + ' ' + COMPUTETREEDISTANCE + ' ${{file1}} ${{file2}} 1 >> {output.txt}; done; done; done'

localrules: gatherBenchmarksTrees
rule gatherBenchmarksTrees:
    input:
        inf1 = expand(OUTDIR + 'cells_{numCells}/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0.05/run_{run}/prior_0.0001/sciphi/force_zyg_1/sciphi_tree_{{distance}}.txt', numCells = NUMCELLS, run = range(0, NUMRUNS), loss = LOSS),
        inf2 = expand(OUTDIR + 'cells_{numCells}/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0/run_{run}/prior_0.0001/sciphi/force_zyg_1/sciphi_tree_{{distance}}.txt', numCells = NUMCELLS, run = range(0, NUMRUNS), loss = LOSS),
        inf3 = expand(OUTDIR + 'cells_{numCells}/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_{para}/run_{run}/prior_0.0001/sciphi/force_zyg_1/sciphi_tree_{{distance}}.txt', numCells = NUMCELLS, run = range(0, NUMRUNS), para = PARA),
        inf4 = expand(OUTDIR + 'cells_{numCells}/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0.05/run_{run}/prior_0.0001/sciphi_orig/force_zyg_1/sciphi_orig_tree_{{distance}}.txt', numCells = NUMCELLS, run = range(0, NUMRUNS), loss = LOSS),
        inf5 = expand(OUTDIR + 'cells_{numCells}/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0/run_{run}/prior_0.0001/sciphi_orig/force_zyg_1/sciphi_orig_tree_{{distance}}.txt', numCells = NUMCELLS, run = range(0, NUMRUNS), loss = LOSS),
        inf6 = expand(OUTDIR + 'cells_{numCells}/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_{para}/run_{run}/prior_0.0001/sciphi_orig/force_zyg_1/sciphi_orig_tree_{{distance}}.txt', numCells = NUMCELLS, run = range(0, NUMRUNS), para = PARA),
        inf7 = expand(OUTDIR + 'cells_{numCells}/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0.05/run_{run}/prior_0.0001/sciphi_max/force_zyg_1/sciphi_max_tree_{{distance}}.txt', numCells = NUMCELLS, run = range(0, NUMRUNS), loss = LOSS),
        inf8 = expand(OUTDIR + 'cells_{numCells}/muts_100/drop_0.2/zyg_0/cpn_0/loss_{loss}/para_0/run_{run}/prior_0.0001/sciphi_max/force_zyg_1/sciphi_max_tree_{{distance}}.txt', numCells = NUMCELLS, run = range(0, NUMRUNS), loss = LOSS),
        inf9 = expand(OUTDIR + 'cells_{numCells}/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_{para}/run_{run}/prior_0.0001/sciphi_max/force_zyg_1/sciphi_max_tree_{{distance}}.txt', numCells = NUMCELLS, run = range(0, NUMRUNS), para = PARA),
        txt = OUTDIR + 'distance_random_tree.txt'
    output:
        txt = OUTDIR + '{distance}_tree.txt',
        #pdf = OUTDIR + '{distance}_tree.pdf'
    shell:
        ('printf "exp\\trun\\tcells\\tloss\\tpara\\tdist\\n" >> {output.txt}; ' +
        'for f in ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_*/para_0.05/run_*/prior_0.0001/sciphi/force_zyg_1/sciphi_tree_{wildcards.distance}.txt; do run=$(echo $f | awk -F\'run_\' \'{{print $2}}\' | cut -d \'/\' -f 1); loss=$(echo $f | awk -F\'loss_\' \'{{print $2}}\' | cut -d \'/\' -f 1); para=$(echo $f | awk -F\'para_\' \'{{print $2}}\' | cut -d \'/\' -f 1); num=$(echo $f | awk -F\'cells_\' \'{{print $2}}\' | cut -d \'/\' -f 1); printf \"SCIPhIN\\t${{run}}\\t${{num}}\\t${{loss}}\\t${{para}}\\t\" >> {output.txt}; head -n 1 $f >> {output.txt}; done; ' + 
        'for f in ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_*/para_0/run_*/prior_0.0001/sciphi/force_zyg_1/sciphi_tree_{wildcards.distance}.txt; do run=$(echo $f | awk -F\'run_\' \'{{print $2}}\' | cut -d \'/\' -f 1); loss=$(echo $f | awk -F\'loss_\' \'{{print $2}}\' | cut -d \'/\' -f 1); para=$(echo $f | awk -F\'para_\' \'{{print $2}}\' | cut -d \'/\' -f 1); num=$(echo $f | awk -F\'cells_\' \'{{print $2}}\' | cut -d \'/\' -f 1); printf \"SCIPhIN\\t${{run}}\\t${{num}}\\t${{loss}}\\t${{para}}\\t\" >> {output.txt}; head -n 1 $f >> {output.txt}; done; ' + 
        'for f in ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_*/run_*/prior_0.0001/sciphi/force_zyg_1/sciphi_tree_{wildcards.distance}.txt; do run=$(echo $f | awk -F\'run_\' \'{{print $2}}\' | cut -d \'/\' -f 1); loss=$(echo $f | awk -F\'loss_\' \'{{print $2}}\' | cut -d \'/\' -f 1); para=$(echo $f | awk -F\'para_\' \'{{print $2}}\' | cut -d \'/\' -f 1); num=$(echo $f | awk -F\'cells_\' \'{{print $2}}\' | cut -d \'/\' -f 1); printf \"SCIPhIN\\t${{run}}\\t${{num}}\\t${{loss}}\\t${{para}}\\t\" >> {output.txt}; head -n 1 $f >> {output.txt}; done; ' + 
        'for f in ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_*/para_0.05/run_*/prior_0.0001/sciphi_orig/force_zyg_1/sciphi_orig_tree_{wildcards.distance}.txt; do run=$(echo $f | awk -F\'run_\' \'{{print $2}}\' | cut -d \'/\' -f 1); loss=$(echo $f | awk -F\'loss_\' \'{{print $2}}\' | cut -d \'/\' -f 1); para=$(echo $f | awk -F\'para_\' \'{{print $2}}\' | cut -d \'/\' -f 1); num=$(echo $f | awk -F\'cells_\' \'{{print $2}}\' | cut -d \'/\' -f 1); printf \"SCIPhI\\t${{run}}\\t${{num}}\\t${{loss}}\\t${{para}}\\t\" >> {output.txt}; head -n 1 $f >> {output.txt}; done; ' + 
        'for f in ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_*/para_0/run_*/prior_0.0001/sciphi_orig/force_zyg_1/sciphi_orig_tree_{wildcards.distance}.txt; do run=$(echo $f | awk -F\'run_\' \'{{print $2}}\' | cut -d \'/\' -f 1); loss=$(echo $f | awk -F\'loss_\' \'{{print $2}}\' | cut -d \'/\' -f 1); para=$(echo $f | awk -F\'para_\' \'{{print $2}}\' | cut -d \'/\' -f 1); num=$(echo $f | awk -F\'cells_\' \'{{print $2}}\' | cut -d \'/\' -f 1); printf \"SCIPhI\\t${{run}}\\t${{num}}\\t${{loss}}\\t${{para}}\\t\" >> {output.txt}; head -n 1 $f >> {output.txt}; done; ' + 
        'for f in ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_*/run_*/prior_0.0001/sciphi_orig/force_zyg_1/sciphi_orig_tree_{wildcards.distance}.txt; do run=$(echo $f | awk -F\'run_\' \'{{print $2}}\' | cut -d \'/\' -f 1); loss=$(echo $f | awk -F\'loss_\' \'{{print $2}}\' | cut -d \'/\' -f 1); para=$(echo $f | awk -F\'para_\' \'{{print $2}}\' | cut -d \'/\' -f 1); num=$(echo $f | awk -F\'cells_\' \'{{print $2}}\' | cut -d \'/\' -f 1); printf \"SCIPhI\\t${{run}}\\t${{num}}\\t${{loss}}\\t${{para}}\\t\" >> {output.txt}; head -n 1 $f >> {output.txt}; done; ' + 
        'for f in ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_*/para_0.05/run_*/prior_0.0001/sciphi_max/force_zyg_1/sciphi_max_tree_{wildcards.distance}.txt; do run=$(echo $f | awk -F\'run_\' \'{{print $2}}\' | cut -d \'/\' -f 1); loss=$(echo $f | awk -F\'loss_\' \'{{print $2}}\' | cut -d \'/\' -f 1); para=$(echo $f | awk -F\'para_\' \'{{print $2}}\' | cut -d \'/\' -f 1); num=$(echo $f | awk -F\'cells_\' \'{{print $2}}\' | cut -d \'/\' -f 1); printf \"SCIPhIN_max\\t${{run}}\\t${{num}}\\t${{loss}}\\t${{para}}\\t\" >> {output.txt}; head -n 1 $f >> {output.txt}; done; ' + 
        'for f in ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_*/para_0/run_*/prior_0.0001/sciphi_max/force_zyg_1/sciphi_max_tree_{wildcards.distance}.txt; do run=$(echo $f | awk -F\'run_\' \'{{print $2}}\' | cut -d \'/\' -f 1); loss=$(echo $f | awk -F\'loss_\' \'{{print $2}}\' | cut -d \'/\' -f 1); para=$(echo $f | awk -F\'para_\' \'{{print $2}}\' | cut -d \'/\' -f 1); num=$(echo $f | awk -F\'cells_\' \'{{print $2}}\' | cut -d \'/\' -f 1); printf \"SCIPhIN_max\\t${{run}}\\t${{num}}\\t${{loss}}\\t${{para}}\\t\" >> {output.txt}; head -n 1 $f >> {output.txt}; done; ' + 
        'for f in ' + OUTDIR + 'cells_25/muts_100/drop_0.2/zyg_0/cpn_0/loss_0/para_*/run_*/prior_0.0001/sciphi_max/force_zyg_1/sciphi_max_tree_{wildcards.distance}.txt; do run=$(echo $f | awk -F\'run_\' \'{{print $2}}\' | cut -d \'/\' -f 1); loss=$(echo $f | awk -F\'loss_\' \'{{print $2}}\' | cut -d \'/\' -f 1); para=$(echo $f | awk -F\'para_\' \'{{print $2}}\' | cut -d \'/\' -f 1); num=$(echo $f | awk -F\'cells_\' \'{{print $2}}\' | cut -d \'/\' -f 1); printf \"SCIPhIN_max\\t${{run}}\\t${{num}}\\t${{loss}}\\t${{para}}\\t\" >> {output.txt}; head -n 1 $f >> {output.txt}; done; ' + 
        'cat {input.txt} >> {output.txt}; ') # +
        #RSCRIPT  + PLOTTREEDIST + ' {output.txt}')
